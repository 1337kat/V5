-- Ultimate Boat Fly: Constant Forward (W) + Automatic, Custom Stride Zig-Zag (A/D)
-- Toggle fly mode with H

local Players = game:GetService("Players")
local UserInputService = cloneref(game:GetService("UserInputService"))
local Workspace = cloneref(game:GetService("Workspace"))
local RunService = cloneref(game:GetService("RunService"))
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local cheat = {
    connections = { renderstepped = {} },
    flyModule = {}
}

RunService.RenderStepped:Connect(function(dt)
    for _, func in pairs(cheat.connections.renderstepped) do
        func(dt)
    end
end)

cheat.utility = {}
cheat.utility.new_renderstepped = function(func)
    cheat.connections.renderstepped[func] = func
    return {
        Disconnect = function()
            cheat.connections.renderstepped[func] = nil
        end
    }
end

do
    local isFlying = false
    local flyConn = nil

    -- === ADJUSTABLE PARAMETERS ===
    local forwardSpeed = 313        -- How fast the boat moves forward (W speed)
    local sideSpeed = 95            -- How fast it moves sideways (A/D speed)
    local strideDistance = 0.1       -- How far (studs) to move left/right before switching (the "stride")
    -- ============================

    local strideDir = 1             -- +1 = right, -1 = left (alternates automatically)
    local strideProgress = 0        -- Tracks distance covered in current stride

    local boat, middle = nil, nil
    local desiredPosition, desiredYaw = nil, nil

    local BoatIdentifiers = {
        {"Hull", "Metal"},
    }

    local function getMiddle()
        local ok, result = pcall(function()
            return Workspace:WaitForChild("Const", 2)
                :WaitForChild("Ignore", 2)
                :WaitForChild("LocalCharacter", 2)
                :WaitForChild("Middle", 2)
        end)
        return ok and result or nil
    end

    local function resetState()
        boat = nil
        middle = nil
        desiredPosition = nil
        desiredYaw = nil
        strideDir = 1
        strideProgress = 0
    end

    LocalPlayer.CharacterAdded:Connect(function()
        isFlying = false
        if flyConn then flyConn:Disconnect() flyConn = nil end
        resetState()
    end)

    local function findNearestBoat()
        boat = nil
        local closest = math.huge
        local origin = middle and middle.Position or Camera.CFrame.Position

        for _, model in pairs(Workspace:GetChildren()) do
            if model:IsA("Model") then
                for _, group in ipairs(BoatIdentifiers) do
                    local allFound = true
                    for _, name in ipairs(group) do
                        if not model:FindFirstChild(name) then
                            allFound = false
                            break
                        end
                    end
                    if allFound then
                        local refPart = model:FindFirstChild(group[1])
                        if refPart and refPart:IsA("BasePart") then
                            local dist = (refPart.Position - origin).Magnitude
                            if dist < closest then
                                closest = dist
                                boat = model
                            end
                        end
                        break
                    end
                end
            end
        end
    end

    local function lockBoat(hull)
        hull.Anchored = false
        hull.AssemblyLinearVelocity = Vector3.zero
        hull.AssemblyAngularVelocity = Vector3.zero
        hull.Velocity = Vector3.zero
        hull.RotVelocity = Vector3.zero
        hull.CFrame = CFrame.new(desiredPosition) * CFrame.Angles(0, desiredYaw, 0)
    end

    local function flyStep(dt)
        if not isFlying then return end

        middle = middle or getMiddle()
        if not middle then return end

        if not boat or (boat:GetPrimaryPartCFrame().Position - middle.Position).Magnitude > 50 then
            findNearestBoat()
            return
        end

        local hull = boat:FindFirstChild("Hull")
        if not hull or not hull:IsA("BasePart") then return end

        -- Get heading (forward) from camera
        local look = Camera.CFrame.LookVector
        look = Vector3.new(look.X, 0, look.Z)
        if look.Magnitude == 0 then look = Vector3.new(1, 0, 0) else look = look.Unit end

        local forward = look -- Forward movement (like holding W)
        local right = Vector3.new(-forward.Z, 0, forward.X) -- Sideways (A/D)

        -- Calculate the velocity: always forward, plus sideways for current stride
        local velocity = (forward * forwardSpeed) + (right * sideSpeed * strideDir)

        -- How much distance covered in this frame?
        local strideStep = math.abs(sideSpeed * dt)
        strideProgress = strideProgress + strideStep

        -- Switch stride direction if strideDistance reached
        if strideProgress >= strideDistance then
            strideDir = -strideDir
            strideProgress = 0
        end

        hull.Anchored = false
        hull.AssemblyLinearVelocity = velocity
        hull.AssemblyAngularVelocity = Vector3.zero
        hull.Velocity = velocity
        hull.RotVelocity = Vector3.zero

        -- Remain upright (no tilt)
        local pos = hull.Position
        local _, y, _ = hull.CFrame:ToOrientation()
        hull.CFrame = CFrame.new(pos) * CFrame.Angles(0, y, 0)
    end

    local function toggleFly()
        isFlying = not isFlying
        warn("Boat Fly " .. (isFlying and "enabled" or "disabled"))

        if isFlying then
            resetState()
            middle = getMiddle()
            findNearestBoat()
            if not flyConn then
                flyConn = cheat.utility.new_renderstepped(flyStep)
            end
        else
            if flyConn then
                flyConn:Disconnect()
                flyConn = nil
            end
            resetState()
        end
    end

    -- Toggle with V key
    UserInputService.InputBegan:Connect(function(input, gpe)
        if not gpe and input.KeyCode == Enum.KeyCode.V then
            toggleFly()
        end
    end)

    cheat.flyModule.Toggle = toggleFly
    cheat.flyModule.IsFlying = function() return isFlying end
end
