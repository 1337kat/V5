--// =============================================================
--//  BOATFLY • CONSTANT VELOCITY (SELF-ORIENTED + SMOOTH STEERING)
--//  A/D SWAPPED • TEXT-VISIBILITY AS MASTER • HARD STOP ON HIDE
--//  SPEED = 420 (FAST VERSION)
--// =============================================================

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- ===== UI =====
local boatflyText = Drawing and Drawing.new and Drawing.new("Text") or nil
if boatflyText then
    boatflyText.Color = Color3.fromRGB(255,160,40)
    boatflyText.Text = "BoatFly"
    boatflyText.Size = 25
    boatflyText.Outline = true
    boatflyText.Center = false
    boatflyText.Visible = false
    RunService.RenderStepped:Connect(function()
        local vs = Camera.ViewportSize
        boatflyText.Position = Vector2.new(vs.X - 100, 160)
    end)
end

-- ===== CONFIG =====
local CFG = {
    Speed               = 420,                    -- constant travel speed (boosted)
    ReacquireDist       = 60,
    UseYawUpright       = true,
    TurnRate            = math.rad(2.6),          -- smooth yaw rotation
    PreferLVWhenSeated  = true,
}

-- ===== STATE =====
local isFlying = false
local boatModel, hull, middle
local input = {}
local currentVel = Vector3.zero
local BoatIdentifiers = { {"Hull","Metal"} }

-- ===== HELPERS =====
local function setVisible(v)
    if boatflyText then
        boatflyText.Visible = v
    end
end

local function getLV()
    if not (CFG.PreferLVWhenSeated and boatModel and boatModel.PrimaryPart) then return nil end
    return (boatModel.PrimaryPart.LinearVelocity or boatModel.PrimaryPart:FindFirstChildOfClass("LinearVelocity"))
end

local function stopMotion()
    currentVel = Vector3.zero
    local lv = getLV()
    if lv then
        pcall(function()
            lv.VectorVelocity = Vector3.zero
            lv.Enabled = false
        end)
    end
    if hull then
        hull.AssemblyLinearVelocity = Vector3.zero
        hull.Velocity = Vector3.zero
        hull.AssemblyAngularVelocity = Vector3.zero
        hull.RotVelocity = Vector3.zero
    end
end

local function getMiddle()
    local ok, res = pcall(function()
        return Workspace:WaitForChild("Const",1)
            :WaitForChild("Ignore",1)
            :WaitForChild("LocalCharacter",1)
            :WaitForChild("Middle",1)
    end)
    return ok and res or nil
end

local function findNearestBoat(origin: Vector3)
    local best, bestDist = nil, math.huge
    for _,model in ipairs(Workspace:GetChildren()) do
        if model:IsA("Model") then
            for _,group in ipairs(BoatIdentifiers) do
                local okAll = true
                for _,name in ipairs(group) do
                    if not model:FindFirstChild(name) then okAll = false break end
                end
                if okAll then
                    local ref = model:FindFirstChild(group[1])
                    if ref and ref:IsA("BasePart") then
                        local d = (ref.Position - origin).Magnitude
                        if d < bestDist then best, bestDist = model, d end
                    end
                    break
                end
            end
        end
    end
    return best
end

local function ensurePrimaryPart(m)
    if not (m and m:IsA("Model")) then return end
    if not m.PrimaryPart then
        local h = m:FindFirstChild("Hull")
        if h and h:IsA("BasePart") then
            pcall(function() m.PrimaryPart = h end)
        else
            for _,d in ipairs(m:GetDescendants()) do
                if d:IsA("BasePart") then
                    pcall(function() m.PrimaryPart = d end)
                    break
                end
            end
        end
    end
end

-- ===== INPUT =====
UserInputService.InputBegan:Connect(function(io,gpe)
    if gpe then return end
    if io.KeyCode then
        input[io.KeyCode] = true
        if io.KeyCode == Enum.KeyCode.V then
            isFlying = not isFlying
            setVisible(isFlying)
            warn("BoatFly: "..(isFlying and "ENABLED" or "DISABLED"))
            if not isFlying then stopMotion() end
        end
    end
end)

UserInputService.InputEnded:Connect(function(io,gpe)
    if gpe then return end
    if io.KeyCode then input[io.KeyCode] = false end
end)

-- ===== MAIN LOOP =====
RunService.RenderStepped:Connect(function(dt)
    -- MASTER GUARD: text visibility dictates power
    if not (boatflyText and boatflyText.Visible) then
        if hull then stopMotion() end
        return
    end

    middle = middle or getMiddle()
    local origin = (middle and middle.Position) or Camera.CFrame.Position

    if (not boatModel) or (not hull) or ((hull.Position - origin).Magnitude > CFG.ReacquireDist) then
        boatModel = findNearestBoat(origin)
        hull = boatModel and boatModel:FindFirstChild("Hull")
        if not (hull and hull:IsA("BasePart")) then
            hull = nil
            stopMotion()
            return
        end
        ensurePrimaryPart(boatModel)
    end

    pcall(function()
        if boatModel.PrimaryPart then boatModel.PrimaryPart:SetNetworkOwner(LocalPlayer) end
        hull:SetNetworkOwner(LocalPlayer)
        local seat = boatModel:FindFirstChildWhichIsA("Seat", true)
        if seat then seat:SetNetworkOwner(LocalPlayer) end
    end)

    -- Self-oriented axes
    local forward = -hull.CFrame.LookVector

    -- Smooth steering (A/D swapped)
    local turnInput = 0
    if input[Enum.KeyCode.A] then turnInput = 1 end
    if input[Enum.KeyCode.D] then turnInput = -1 end
    if turnInput ~= 0 then
        hull.CFrame = hull.CFrame * CFrame.Angles(0, turnInput * CFG.TurnRate, 0)
    end

    -- Movement keys
    local move = Vector3.zero
    if input[Enum.KeyCode.W] then move += forward end
    if input[Enum.KeyCode.S] then move -= forward end

    -- Apply constant velocity
    if move.Magnitude > 0 then
        currentVel = move.Unit * CFG.Speed
    else
        currentVel = Vector3.zero
    end

    local lv = getLV()
    if lv then
        pcall(function()
            if currentVel.Magnitude > 0 then
                if lv.MaxForce and typeof(lv.MaxForce) == "number" then lv.MaxForce = math.huge end
                if lv.MaxVectorForce and typeof(lv.MaxVectorForce) == "Vector3" then
                    lv.MaxVectorForce = Vector3.new(math.huge, math.huge, math.huge)
                end
                lv.VectorVelocity = currentVel
                lv.Enabled = true
            else
                lv.VectorVelocity = Vector3.zero
                lv.Enabled = false
            end
        end)
    end

    hull.Anchored = false
    hull.AssemblyLinearVelocity = currentVel
    hull.Velocity = currentVel
    hull.AssemblyAngularVelocity = Vector3.zero
    hull.RotVelocity = Vector3.zero

    if CFG.UseYawUpright then
        local pos = hull.Position
        local _, y, _ = hull.CFrame:ToOrientation()
        hull.CFrame = CFrame.new(pos) * CFrame.Angles(0, y, 0)
    end
end)

-- ===== OPTIONAL API =====
getgenv().BoatFly = {
    Toggle = function()
        isFlying = not isFlying
        setVisible(isFlying)
        warn("BoatFly: "..(isFlying and "ENABLED" or "DISABLED"))
        if not isFlying then stopMotion() end
    end,
    SetSpeed = function(s)
        if type(s) == "number" and s > 0 then
            CFG.Speed = s
            warn(("BoatFly speed set to %d"):format(s))
        end
    end
}

print("[BoatFly Constant Velocity • Text-Master • Hard Stop] loaded with speed 420.")
